// === HOISTING ===
// Con var: la declaraci√≥n se "eleva" pero no la asignaci√≥n
console.log(x); // undefined (la variable existe, pero a√∫n no tiene valor)
// console.log(y); // ‚ùå ReferenceError (no existe todav√≠a)
// console.log(z); // ‚ùå ReferenceError (no existe todav√≠a)

var x = 1;
let y = 2;
const z = 3;

console.log("x =", x, "y =", y, "z =", z);

// === ALCANCE DE FUNCI√ìN ===
function pruebaFuncion() {
  var a = "var dentro de funci√≥n";
  let b = "let dentro de funci√≥n";
  const c = "const dentro de funci√≥n";
  console.log("Dentro de la funci√≥n:", a, b, c);
}
pruebaFuncion();
// console.log(a, b, c); // ‚ùå no accesibles fuera de la funci√≥n

// === ALCANCE DE BLOQUE ===
if (true) {
  var m = "var dentro de bloque";
  let n = "let dentro de bloque";
  const o = "const dentro de bloque";
  console.log("Dentro del bloque:", m, n, o);
}

console.log("Fuera del bloque m:", m); // ‚úÖ existe porque var no respeta el bloque
// console.log(n, o); // ‚ùå ReferenceError: let y const solo existen dentro del bloque

// === REDECLARACI√ìN ===
var redeclaracion = "primer valor con var";
var redeclaracion = "segundo valor con var"; // ‚úÖ permitido
console.log("Redeclaraci√≥n con var:", redeclaracion);

// let redeclaracionLet = "primer valor con let";
// let redeclaracionLet = "segundo valor con let"; // ‚ùå SyntaxError

// const redeclaracionConst = "primer valor con const";
// const redeclaracionConst = "segundo valor con const"; // ‚ùå SyntaxError

// === CONST Y MUTABILIDAD ===
const PI = 3.14;
// PI = 3.1416; // ‚ùå no se puede reasignar

const numeros = [1, 2, 3];
numeros.push(4); // ‚úÖ se puede mutar el contenido del array
console.log("Array mutado con const:", numeros);

const persona = { nombre: "Ana", edad: 20 };
persona.edad = 21; // ‚úÖ se puede cambiar una propiedad
console.log("Objeto mutado con const:", persona);

// üìå INFORME (en comentarios):
// 1. Hoisting: con var, la declaraci√≥n se eleva (se crea al inicio con valor undefined).
//    Con let y const no hay hoisting: no se puede acceder antes de declarar.
// 2. Alcance: var tiene alcance de funci√≥n, no de bloque.
//    let y const respetan el bloque en el que se definen.
// 3. Const: no permite reasignaci√≥n de la variable completa,
//    pero s√≠ se pueden mutar los elementos internos de arrays y objetos.
